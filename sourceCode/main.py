# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets

from adbutils import adb, AdbDevice, errors
from numpy import asarray
import aircv
import random

def pointOffset(point):
    x = int(random.uniform(point.x - 2, point.x + 2))
    y = int(random.uniform(point.y - 2, point.y + 2))
    return x, y


def doubleClick(device: AdbDevice, x: int, y: int):
    device.click(x, y)
    device.click(x, y)


class worker(QtCore.QThread):
    startMode = 0
    expectNum = 0
    moneyNum = 0
    stoneNum = 0

    isStart = QtCore.pyqtSignal()
    isProgress = QtCore.pyqtSignal(str)
    isFinish = QtCore.pyqtSignal()
    isError = QtCore.pyqtSignal()

    emitLog = QtCore.pyqtSignal(str)
    emitMoney = QtCore.pyqtSignal(str)
    emitStone = QtCore.pyqtSignal(str)

    def __init__(self):
        super().__init__()

    def setVariable(self, startMode: int, expectNum: int, moneyNum: int, stoneNum: int, adbAddress: str):
        self.startMode = startMode
        self.expectNum = expectNum
        self.moneyNum = moneyNum
        self.stoneNum = stoneNum
        self.adbAddress = adbAddress

    def run(self):
        self.isStart.emit()

        print("startMode: ", self.startMode)
        print("expectedNum: ", self.expectNum)

        try:
            self.emitLog.emit("===================== 检查 ========================")

            QtCore.QThread.sleep(1)

            # check input
            if self.moneyNum < 280000:
                self.emitLog.emit("错误: 金币不足28万")
                raise ValueError("out of money")

            if self.stoneNum < 3:
                self.emitLog.emit("错误: 天空石不足以刷新商店")
                raise ValueError("out of stone")

            if self.startMode == 3 and self.expectNum > self.stoneNum:
                self.emitLog.emit("错误: 天空石使用数量大于持有数量")
                raise ValueError("stone input error")
            self.emitLog.emit("正在尝试连接模拟器......")
            QtCore.QThread.sleep(1)
            adb.connect(self.adbAddress, timeout=10)
            device = adb.device(serial=self.adbAddress)
            print(device.info)

            self.emitLog.emit("adb连接成功")

            QtCore.QThread.sleep(1)

            self.emitLog.emit("初始化完成")

            QtCore.QThread.sleep(1)

            self.emitLog.emit("=================== 开始刷商店 ======================")

            QtCore.QThread.sleep(1)

            refreshTime = 0
            covenantFoundTime = 0
            mysticFoundTime = 0

            covenant = aircv.imread("./img/covenantLocation.png")
            mystic = aircv.imread("./img/mysticLocation.png")
            refreshButton = aircv.imread(f"./img/refreshButton.png")
            refreshYesButton = aircv.imread(f"./img/refreshYesButton.png")
            confirmBuyButton1 = aircv.imread(f"./img/confirmBuyButton-1.png")
            confirmBuyButton2 = aircv.imread(f"./img/confirmBuyButton-2.png")

            needRefresh = False
            covenantFound = False
            mysticFound = False
            flag = 1
            while self.expectNum > 0 and self.moneyNum > 280000 and self.stoneNum >= 3:
                screenshot = asarray(device.screenshot())

                covenantLocation = aircv.find_template(screenshot, covenant, 0.9)
                if covenantLocation and (not covenantFound):
                    covenantFound = True

                    self.emitLog.emit("[+] 找到圣约书签")

                    while True:
                        covenantFoundResult: tuple = covenantLocation["result"]
                        # 这里双击的是购买按键，根据分辨率不同，需要调整对应的坐标
                        doubleClick(
                            device,
                            covenantFoundResult[0] + 800,
                            covenantFoundResult[1] + 40,
                        )

                        QtCore.QThread.sleep(1)

                        buy_screenshot = asarray(device.screenshot())
                        confirmBuyButtonLocation = aircv.find_template(
                            buy_screenshot, confirmBuyButton1, 0.9
                        )

                        if confirmBuyButtonLocation:
                            confirmBuyButtonFoundResult: tuple = confirmBuyButtonLocation["result"]

                            while True:
                                doubleClick(
                                    device,
                                    confirmBuyButtonFoundResult[0],
                                    confirmBuyButtonFoundResult[1],
                                )

                                QtCore.QThread.sleep(1)
                                after_buy_screenshot = asarray(device.screenshot())
                                buyButtonLocationAfter = aircv.find_template(
                                    after_buy_screenshot, confirmBuyButton1, 0.9, True
                                )
                                flag = 1
                                if not buyButtonLocationAfter:
                                    break

                                QtCore.QThread.sleep(1)

                            if self.startMode == 1:
                                self.expectNum -= 1
                                self.emitLog.emit(f"剩余次数: {self.expectNum}次")

                            self.moneyNum = self.moneyNum - 184000
                            covenantFoundTime += 1
                            self.emitMoney.emit(str(self.moneyNum))

                            break

                        QtCore.QThread.sleep(1)

                else:
                    print("not find covenant!")

                mysticLocation = aircv.find_template(screenshot, mystic, 0.9)
                if mysticLocation and (not mysticFound):
                    mysticFound = True

                    print("find mystic!")
                    self.emitLog.emit("[+] 找到神秘奖牌")
                    flag = 1

                    while True:
                        mysticFoundResult: tuple = mysticLocation["result"]
                        doubleClick(
                            device,
                            mysticFoundResult[0] + 800,
                            mysticFoundResult[1] + 40,
                        )

                        QtCore.QThread.sleep(1)

                        buy_screenshot = asarray(device.screenshot())
                        confirmBuyButtonLocation = aircv.find_template(
                            buy_screenshot, confirmBuyButton2, 0.9
                        )

                        if confirmBuyButtonLocation:
                            confirmBuyButtonFoundResult: tuple = confirmBuyButtonLocation["result"]

                            while True:
                                doubleClick(
                                    device,
                                    confirmBuyButtonFoundResult[0],
                                    confirmBuyButtonFoundResult[1],
                                )

                                QtCore.QThread.sleep(1)

                                after_buy_screenshot = asarray(device.screenshot())
                                buyButtonLocationAfter = aircv.find_template(
                                    after_buy_screenshot, confirmBuyButton2, 0.9, True
                                )

                                if not buyButtonLocationAfter:
                                    break

                                QtCore.QThread.sleep(1)

                            if self.startMode == 2:
                                self.expectNum -= 1
                                self.emitLog.emit(f"剩余次数: {self.expectNum}次")

                            self.moneyNum = self.moneyNum - 280000
                            mysticFoundTime += 1
                            self.emitMoney.emit(str(self.moneyNum))

                            break

                        QtCore.QThread.sleep(1)

                else:
                    print("not find mystic!")

                if needRefresh:
                    self.emitLog.emit(f"第{flag}次刷商店，还没刷到")
                    flag += 1
                    refreshButtonLocation = aircv.find_template(
                        screenshot, refreshButton, 0.9
                    )
                    while True:
                        refreshButtonFoundResult: tuple = refreshButtonLocation[
                            "result"
                        ]
                        doubleClick(
                            device,
                            refreshButtonFoundResult[0],
                            refreshButtonFoundResult[1],
                        )

                        QtCore.QThread.sleep(1)

                        confirm_screenshot = asarray(device.screenshot())
                        refreshYesButtonLocation = aircv.find_template(
                            confirm_screenshot, refreshYesButton, 0.9
                        )

                        if refreshYesButtonLocation:
                            refreshYesButtonFoundResult: tuple = (
                                refreshYesButtonLocation["result"]
                            )

                            while True:
                                doubleClick(
                                    device,
                                    refreshYesButtonFoundResult[0],
                                    refreshYesButtonFoundResult[1],
                                )

                                QtCore.QThread.sleep(1)

                                after_click_yes_screenshot = asarray(
                                    device.screenshot()
                                )
                                refreshYesButtonLocation = aircv.find_template(
                                    after_click_yes_screenshot, refreshYesButton, 0.9
                                )

                                if not refreshYesButtonLocation:
                                    break

                                QtCore.QThread.sleep(1)

                            self.stoneNum = self.stoneNum - 3
                            self.emitStone.emit(str(self.stoneNum))

                            refreshTime += 1

                            if self.startMode == 3:
                                self.expectNum -= 3
                                self.emitLog.emit(f"剩余次数: {int(self.expectNum / 3)}次")

                            needRefresh = False
                            covenantFound = False
                            mysticFound = False

                            QtCore.QThread.sleep(1)

                            break

                        QtCore.QThread.sleep(1)

                else:
                    device.swipe(1400, 500, 1400, 200, 0.1)
                    needRefresh = True

                    QtCore.QThread.sleep(1)

            # finished report
            self.emitLog.emit("====================== 结算 =========================")
            self.emitLog.emit("共花费:")
            self.emitLog.emit(f"天空石: {refreshTime * 3}个")
            self.emitLog.emit(f"金币: {covenantFoundTime * 184000 + mysticFoundTime * 280000}元")
            self.emitLog.emit("获得书签:")
            self.emitLog.emit(f"圣约: {covenantFoundTime}次")
            self.emitLog.emit(f"神秘: {mysticFoundTime}次")

            self.isFinish.emit()

        except errors.AdbError as e:
            print(e)
            self.emitLog.emit(str(e))
        except Exception as e:
            print(e)
            self.emitLog.emit(str(e))


class Ui_Main(object):
    start = False

    def setupUi(self, mainWidget):
        mainWidget.setObjectName("Main")
        mainWidget.resize(570, 305)
        mainWidget.setMinimumSize(QtCore.QSize(570, 290))
        mainWidget.setMaximumSize(QtCore.QSize(570, 290))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(12)
        mainWidget.setFont(font)
        self.tabWidget = QtWidgets.QTabWidget(mainWidget)
        self.tabWidget.setGeometry(QtCore.QRect(5, 5, 560, 280))
        self.tabWidget.setMinimumSize(QtCore.QSize(560, 280))
        self.tabWidget.setMaximumSize(QtCore.QSize(560, 280))

        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.functionTab = QtWidgets.QWidget()
        self.functionTab.setMinimumSize(QtCore.QSize(560, 280))
        self.functionTab.setMaximumSize(QtCore.QSize(560, 280))
        self.functionTab.setFont(font)
        self.functionTab.setObjectName("functionTab")

        self.covenantInput = QtWidgets.QLineEdit(self.functionTab)
        self.covenantInput.setFont(font)
        self.covenantInput.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.covenantInput.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight
            | QtCore.Qt.AlignmentFlag.AlignTrailing
            | QtCore.Qt.AlignmentFlag.AlignVCenter
        )
        self.covenantInput.setObjectName("covenantInput")

        self.mysticInput = QtWidgets.QLineEdit(self.functionTab)
        self.mysticInput.setFont(font)
        self.mysticInput.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.mysticInput.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight
            | QtCore.Qt.AlignmentFlag.AlignTrailing
            | QtCore.Qt.AlignmentFlag.AlignVCenter
        )
        self.mysticInput.setObjectName("mysticInput")

        # 金币text定义
        self.moneyTextShowLabel = QtWidgets.QLabel(self.functionTab)
        self.moneyTextShowLabel.setFont(font)
        self.moneyTextShowLabel.setObjectName("moneyTextShowLabel")

        # 金币输入定义
        self.moneyTotalShowEdit = QtWidgets.QLineEdit(self.functionTab)
        self.moneyTotalShowEdit.setFont(font)
        self.moneyTotalShowEdit.setLayoutDirection(
            QtCore.Qt.LayoutDirection.RightToLeft
        )
        self.moneyTotalShowEdit.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight
            | QtCore.Qt.AlignmentFlag.AlignTrailing
            | QtCore.Qt.AlignmentFlag.AlignVCenter
        )
        self.moneyTotalShowEdit.setObjectName("moneyTotalShowEdit")

        # adb text定义
        self.adbAddressTextShowLabel = QtWidgets.QLabel(self.functionTab)
        self.adbAddressTextShowLabel.setFont(font)
        self.adbAddressTextShowLabel.setObjectName("adbAddressTextShowLabel")

        # adb输入定义
        self.adbAddressShowEdit = QtWidgets.QLineEdit(self.functionTab)
        self.adbAddressShowEdit.setFont(font)
        self.adbAddressShowEdit.setLayoutDirection(
            QtCore.Qt.LayoutDirection.RightToLeft
        )
        self.adbAddressShowEdit.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight
            | QtCore.Qt.AlignmentFlag.AlignTrailing
            | QtCore.Qt.AlignmentFlag.AlignVCenter
        )
        self.adbAddressShowEdit.setObjectName("adbAddressShowEdit")

        self.divider = QtWidgets.QFrame(self.functionTab)
        self.divider.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.divider.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.divider.setObjectName("divider")
        self.stoneTextShowLabel = QtWidgets.QLabel(self.functionTab)


        self.stoneTextShowLabel.setFont(font)
        self.stoneTextShowLabel.setObjectName("stoneTextShowLabel")
        self.stoneTotalShowEdit = QtWidgets.QLineEdit(self.functionTab)


        self.stoneTotalShowEdit.setFont(font)
        self.stoneTotalShowEdit.setLayoutDirection(
            QtCore.Qt.LayoutDirection.RightToLeft
        )
        self.stoneTotalShowEdit.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight
            | QtCore.Qt.AlignmentFlag.AlignTrailing
            | QtCore.Qt.AlignmentFlag.AlignVCenter
        )
        self.stoneTotalShowEdit.setObjectName("stoneTotalShowEdit")
        self.startButton = QtWidgets.QPushButton(self.functionTab)

        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(12)
        self.startButton.setFont(font)
        self.startButton.setStyleSheet("")
        self.startButton.setDefault(False)
        self.startButton.setFlat(False)
        self.startButton.setObjectName("startButton")
        self.startButton.clicked.connect(self.startPressEvent)
        self.covenantTimeLabel = QtWidgets.QLabel(self.functionTab)

        self.covenantTimeLabel.setObjectName("covenantTimeLabel")
        self.mysticTimeLabel = QtWidgets.QLabel(self.functionTab)

        self.mysticTimeLabel.setObjectName("mysticTimeLabel")
        self.logTextBrowser = QtWidgets.QTextBrowser(self.functionTab)

        font = QtGui.QFont()
        font.setPointSize(10)
        self.logTextBrowser.setFont(font)
        self.logTextBrowser.setObjectName("logTextBrowser")
        self.stoneTimeLabel = QtWidgets.QLabel(self.functionTab)

        self.stoneTimeLabel.setObjectName("stoneTimeLabel")
        self.stoneInput = QtWidgets.QLineEdit(self.functionTab)
        self.stoneInput.setFont(font)
        self.stoneInput.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.stoneInput.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight
            | QtCore.Qt.AlignmentFlag.AlignTrailing
            | QtCore.Qt.AlignmentFlag.AlignVCenter
        )
        self.stoneInput.setObjectName("stoneInput")
        self.covenantRadioButton = QtWidgets.QRadioButton(self.functionTab)

        self.covenantRadioButton.setChecked(True)
        self.covenantRadioButton.setObjectName("covenantRadioButton")
        self.mysticRadioButton = QtWidgets.QRadioButton(self.functionTab)
        self.mysticRadioButton.setObjectName("mysticRadioButton")
        self.stoneRadioButton = QtWidgets.QRadioButton(self.functionTab)
        self.stoneRadioButton.setObjectName("stoneRadioButton")
        self.tabWidget.addTab(self.functionTab, "")
        self.introductionTab = QtWidgets.QWidget()

        # 金币text框
        self.moneyTextShowLabel.setGeometry(QtCore.QRect(20, 10, 60, 20))
        # 天空石text框
        self.stoneTextShowLabel.setGeometry(QtCore.QRect(20, 45, 60, 20))
        # adb text框
        self.adbAddressTextShowLabel.setGeometry(QtCore.QRect(20, 80, 60, 20))
        # 金币输入框
        self.moneyTotalShowEdit.setGeometry(QtCore.QRect(100, 10, 100, 20))
        # 天空石输入框
        self.stoneTotalShowEdit.setGeometry(QtCore.QRect(100, 45, 100, 20))
        # adb输入框
        self.adbAddressShowEdit.setGeometry(QtCore.QRect(100, 80, 100, 20))

        self.divider.setGeometry(QtCore.QRect(210, 10, 10, 90))

        self.covenantRadioButton.setGeometry(QtCore.QRect(230, 10, 90, 20))
        self.mysticRadioButton.setGeometry(QtCore.QRect(230, 45, 90, 20))
        self.stoneRadioButton.setGeometry(QtCore.QRect(230, 80, 90, 20))
        self.covenantInput.setGeometry(QtCore.QRect(330, 10, 70, 20))
        self.mysticInput.setGeometry(QtCore.QRect(330, 45, 70, 20))
        self.stoneInput.setGeometry(QtCore.QRect(330, 80, 70, 20))
        self.covenantTimeLabel.setGeometry(QtCore.QRect(410, 10, 20, 20))
        self.mysticTimeLabel.setGeometry(QtCore.QRect(410, 45, 20, 20))
        self.stoneTimeLabel.setGeometry(QtCore.QRect(410, 80, 20, 20))

        self.startButton.setGeometry(QtCore.QRect(450, 10, 85, 30))
        self.logTextBrowser.setGeometry(QtCore.QRect(20, 120, 515, 115))

        self.worker = worker()
        self.worker.isStart.connect(self.startWorker)
        self.worker.isFinish.connect(self.stopWorker)
        self.worker.isError.connect(self.errorWorker)

        self.worker.emitLog.connect(lambda text: self.logTextBrowser.append(text))
        self.worker.emitMoney.connect(
            lambda text: self.moneyTotalShowEdit.setText(text)
        )
        self.worker.emitStone.connect(
            lambda text: self.stoneTotalShowEdit.setText(text)
        )

        self.retranslateUi(mainWidget)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(mainWidget)

    def retranslateUi(self, Main):
        _translate = QtCore.QCoreApplication.translate
        Main.setWindowTitle(_translate("Main", "第七史诗刷商店小工具（国服专用版）"))
        self.covenantInput.setText(_translate("Main", "100"))
        self.mysticInput.setText(_translate("Main", "0"))
        self.moneyTextShowLabel.setText(_translate("Main", "金币"))
        self.moneyTotalShowEdit.setText(_translate("Main", "1000000"))
        self.stoneTextShowLabel.setText(_translate("Main", "天空石"))
        self.stoneTotalShowEdit.setText(_translate("Main", "1000"))
        self.adbAddressTextShowLabel.setText(_translate("Main", "ADB地址"))
        self.adbAddressShowEdit.setText(_translate("Main", "127.0.0.1:7555"))
        self.startButton.setText(_translate("Main", "开始"))
        self.covenantTimeLabel.setText(_translate("Main", "次"))
        self.mysticTimeLabel.setText(_translate("Main", "次"))
        self.logTextBrowser.setHtml(
            _translate(
                "Main",
                '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n'
                '<html><head><meta name="qrichtext" content="1" /><style type="text/css">\n'
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:'黑体'; font-size:12pt; font-weight:400; "
                "font-style:normal;\">\n"
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; '
                'text-indent:0px;">输入现有金币及天空石启动，启动条件:</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; '
                'text-indent:0px;">金币至少280000元</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; '
                'text-indent:0px;">天空石至少3个</p>\n'
                '<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; '
                'margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; '
                'text-indent:0px;">填的数字为停止的条件，刷到的神秘与圣约都会买</p>\n'
            )
        )
        self.stoneTimeLabel.setText(_translate("Main", "个"))
        self.stoneInput.setText(_translate("Main", "0"))
        self.covenantRadioButton.setText(_translate("Main", "圣约书签"))
        self.mysticRadioButton.setText(_translate("Main", "神秘奖牌"))
        self.stoneRadioButton.setText(_translate("Main", "天空石"))
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.functionTab), _translate("Main", "功能")
        )

        self.introductionTab.setMinimumSize(QtCore.QSize(560, 280))
        self.introductionTab.setMaximumSize(QtCore.QSize(560, 280))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(12)
        self.introductionTab.setFont(font)
        self.introductionTab.setObjectName("introductionTab")
        self.textBrowser = QtWidgets.QLabel(self.introductionTab)
        self.githubText = QtWidgets.QLabel(self.introductionTab)
        self.githubText.setFont(font)
        self.githubText.setObjectName("githubText")
        self.githubTextUrl = QtWidgets.QLabel(self.introductionTab)
        self.githubTextUrl.setFont(font)
        self.githubTextUrl.setScaledContents(False)
        self.githubTextUrl.setWordWrap(True)
        self.githubTextUrl.setOpenExternalLinks(True)
        self.githubTextUrl.setObjectName("githubTextUrl")
        self.tabWidget.addTab(self.introductionTab, "")
        self.githubText.setGeometry(QtCore.QRect(20, 20, 530, 20))
        self.githubTextUrl.setGeometry(QtCore.QRect(20, 40, 530, 40))
        self.githubText.setText(_translate("Main", '特别感谢项目原作者<a href="https://github.com/steven010116">steven010116</a>，原项目GitHub地址:'))
        self.githubTextUrl.setText(
            _translate(
                "Main",
                '<a href="https://www.github.com/steven010116/epic7autoBookmark">https://www.github.com/steven010116/epic7autoBookmark</a>',
            )
        )
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.introductionTab), _translate("Main", "简介")
        )

    def startPressEvent(self):
        self.start = not self.start

        if self.start:
            moneyNum = (
                int(self.moneyTotalShowEdit.text())
                if self.moneyTotalShowEdit.text().isdigit()
                else 0
            )
            stoneNum = (
                int(self.stoneTotalShowEdit.text())
                if self.stoneTotalShowEdit.text().isdigit()
                else 0
            )

            adbAddress = (
                str(self.adbAddressShowEdit.text())
                if self.adbAddressShowEdit.text() != ""
                else "127.0.0.1:7555"
            )

            if moneyNum == 0 or stoneNum == 0:
                self.logTextBrowser.setText("")
                self.logTextBrowser.setTextColor(QtGui.QColor("red"))
                self.logTextBrowser.append("[x]石头或金币输入错误")
                self.logTextBrowser.setTextColor(QtGui.QColor("black"))
                self.logTextBrowser.append("====================== 停止 =======================")
                self.start = not self.start
                self.startProperty(False)
                return
            if self.covenantRadioButton.isChecked():
                startMode = 1
                covenant = self.covenantInput.text()
                expectNum = int(covenant) if covenant.isdigit() else 0
                self.covenantInput.setText(str(expectNum))

            elif self.mysticRadioButton.isChecked():
                startMode = 2
                mystic = self.mysticInput.text()
                expectNum = int(mystic) if mystic.isdigit() else 0
                self.mysticInput.setText(str(expectNum))

            elif self.stoneRadioButton.isChecked():
                startMode = 3
                stone = self.stoneInput.text()
                expectNum = int(stone) if stone.isdigit() else 0
                self.stoneInput.setText(str(expectNum))

            else:
                self.logTextBrowser.setTextColor(QtGui.QColor("red"))
                self.logTextBrowser.append("[x]没有选取的radioButton,")
                self.logTextBrowser.setTextColor(QtGui.QColor("black"))
                self.logTextBrowser.append("====================== 停止 =======================")
                self.start = not self.start
                self.startProperty(False)
                return

            self.worker.setVariable(startMode, expectNum, moneyNum, stoneNum, adbAddress)
            self.worker.start()
        else:
            self.worker.terminate()
            self.logTextBrowser.append("====================== 停止 =======================")
            self.startProperty(False)

    def startProperty(self, isDisabled: bool):
        if isDisabled:
            self.startButton.setText("停止")
        else:
            self.startButton.setText("开始")

        self.covenantRadioButton.setDisabled(isDisabled)
        self.mysticRadioButton.setDisabled(isDisabled)
        self.stoneRadioButton.setDisabled(isDisabled)
        self.moneyTotalShowEdit.setDisabled(isDisabled)
        self.stoneTotalShowEdit.setDisabled(isDisabled)
        self.covenantInput.setDisabled(isDisabled)
        self.mysticInput.setDisabled(isDisabled)
        self.stoneInput.setDisabled(isDisabled)
        self.adbAddressShowEdit.setDisabled(isDisabled)

    def startWorker(self):
        self.logTextBrowser.setText("")
        self.startProperty(True)

    def errorWorker(self):
        self.start = False
        self.startProperty(False)

    def stopWorker(self):
        self.start = False
        self.startProperty(False)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon("main.ico"))

    Main = QtWidgets.QWidget()
    ui = Ui_Main()
    ui.setupUi(Main)
    Main.show()
    sys.exit(app.exec())
